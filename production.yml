services:
  postgres:
    image: postgres:latest
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 15s
      retries: 10

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - "./backend:/backend"
      - ./media:/backend/media
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - "./frontend:/app"
      - "/app/node_modules"

  nginx:
    depends_on:
      - backend
      - frontend
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "443:443"
    volumes:
      - ./media:/backend/media

  celery:
    build:
      context: ./api
      dockerfile: Dockerfile.local
    command: celery -A momentum worker -l info -E
    volumes:
      - ./api:/api
    working_dir: /api
    depends_on:
      - redis
    env_file:
      - .env

  celery-beat:
    build:
      context: ./api
      dockerfile: Dockerfile.local
    command: celery -A momentum beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./api:/api
    working_dir: /api
    depends_on:
      - redis
      - api
    env_file:
      - .env

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  flower:
    build:
      context: ./api
      dockerfile: Dockerfile.local
    command: celery -A momentum flower --port=5555 --broker=redis://redis:6379/0
    ports:
      - "5555:5555"
    volumes:
      - ./api:/api
    working_dir: /api
    depends_on:
      - redis
    env_file:
      - .env


volumes:
  postgres_data:
  frontend-build: